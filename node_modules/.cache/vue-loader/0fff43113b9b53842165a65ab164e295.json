{"remainingRequest":"/home/nash/Vue Js/vue-atm-machine/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nash/Vue Js/vue-atm-machine/src/components/Cash-Withdraw.vue?vue&type=style&index=0&id=7c2afaf8&lang=scss&scoped=true&","dependencies":[{"path":"/home/nash/Vue Js/vue-atm-machine/src/components/Cash-Withdraw.vue","mtime":1628015890153},{"path":"/home/nash/Vue Js/vue-atm-machine/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nash/Vue Js/vue-atm-machine/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/nash/Vue Js/vue-atm-machine/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/nash/Vue Js/vue-atm-machine/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nash/Vue Js/vue-atm-machine/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nash/Vue Js/vue-atm-machine/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmJ1dHRvbi5pbnZhbGlkIHsKICBvcGFjaXR5OiAwLjU7Cn0KLmFtb3VudC1maWVsZCB7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKfQo="},{"version":3,"sources":["Cash-Withdraw.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmHA;AACA;AACA;AACA;AACA;AACA","file":"Cash-Withdraw.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <form @submit.prevent=\"submit\">\n      <v-field label=\"Pin\" :v=\"$v.amount\">\n        <input\n          class=\"amount-field\"\n          type=\"number\"\n          v-model=\"amount\"\n          @blur=\"$v.amount.$touch()\"\n        />\n      </v-field>\n      <button type=\"submit\" :class=\"{ invalid: $v.$invalid }\">Enter</button>\n    </form>\n    <v-dialog />\n  </div>\n</template>\n\n<script>\nimport VField from \"./V-field.vue\";\nimport { required, maxValue } from \"vuelidate/lib/validators\";\nimport ProcessingModal from \"./ProcessingModal.vue\";\nimport ReceiptModal from \"./ReceiptModal.vue\";\n\nconst greaterThanZero = value => value > 0;\nexport default {\n  components: {\n    VField\n  },\n  data() {\n    return {\n      amount: \"\",\n      totalAmount: 50000\n    };\n  },\n  methods: {\n    submit() {\n      this.$v.$touch();\n      if (!this.$v.$error) {\n        this.withDrawFashCash();\n      }\n    },\n    withDrawFashCash() {\n      this.$modal.show(\"dialog\", {\n        text: `\n        <p style=\"text-align:center;\">Are you sure you want to withdraw ${this.amount}?</p>\n        <p style=\"text-align:center;\">Your remaining balance would be: ${this.remainingBalance}</p>\n        `,\n        buttons: [\n          {\n            title: \"No\",\n            handler: () => {\n              this.amount = 0;\n              this.$modal.hide(\"dialog\");\n            }\n          },\n          {\n            title: \"Yes\",\n            default: true,\n            handler: () => {\n              this.$modal.hide(\"dialog\");\n              this.showProcessingModal();\n            }\n          }\n        ]\n      });\n    },\n    showProcessingModal() {\n      this.$modal.show(\n        ProcessingModal,\n        {},\n        {\n          width: \"400px\",\n          height: \"auto\",\n          clickToClose: false,\n          name: \"processingModal\"\n        }\n      );\n\n      setTimeout(() => {\n        this.$modal.hide(\"processingModal\");\n        this.showReceiptModal();\n      }, 2000);\n    },\n    showReceiptModal() {\n      this.$modal.show(\n        ReceiptModal,\n        {\n          amount: this.amount,\n          remainingBalance: this.remainingBalance\n        },\n        {\n          width: \"400px\",\n          height: \"auto\",\n          clickToClose: false,\n          name: \"receiptModal\"\n        }\n      );\n    }\n  },\n  validations: {\n    amount: {\n      required,\n      greaterThanZero,\n      maxValue: maxValue(20000)\n    }\n  },\n  computed: {\n    remainingBalance() {\n      return this.totalAmount - this.amount;\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\nbutton.invalid {\n  opacity: 0.5;\n}\n.amount-field {\n  border-style: solid;\n}\n</style>\n"]}]}